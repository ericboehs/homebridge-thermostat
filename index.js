// Generated by CoffeeScript 1.10.0
var Characteristic, Service, Thermostat, request;

Service = void 0;

Characteristic = void 0;

request = require('request');

Thermostat = function(log, config) {
  this.log = log;
  this.name = config.name;
  this.device_id = config.device_id || 'device_id';
  this.apiroute = config.api_route + "/" + this.device_id;
  this.access_token = config.access_token || 'access_token';
  this.log(this.name, this.apiroute);
  this.temperatureDisplayUnits = Characteristic.TemperatureDisplayUnits.FAHRENHEIT;
  this.temperature = 24;
  this.currentHeatingCoolingState = Characteristic.CurrentHeatingCoolingState.OFF;
  this.targetTemperature = 24;
  return this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.OFF;
};

module.exports = function(homebridge) {
  Service = homebridge.hap.Service;
  Characteristic = homebridge.hap.Characteristic;
  return homebridge.registerAccessory('homebridge-thermostat', 'Thermostat', Thermostat);
};

Thermostat.prototype = {
  cToF: function(value) {
    return Number((9 * value / 5 + 32).toFixed(0));
  },
  fToC: function(value) {
    return Number((5 * (value - 32) / 9).toFixed(2));
  },
  httpRequest: function(url, body, method, username, password, sendimmediately, callback) {
    return request({
      url: url,
      body: body,
      method: method,
      auth: {
        user: username,
        pass: password,
        sendImmediately: sendimmediately
      }
    }, function(error, response, body) {
      return callback(error, response, body);
    });
  },
  identify: function(callback) {
    this.log('Identify requested!');
    return callback(null);
  },
  getCurrentHeatingCoolingState: function(callback) {
    this.log('getCurrentHeatingCoolingState from:', this.apiroute + '/info');
    return request.get({
      url: this.apiroute + '/info',
      auth: {
        bearer: this.access_token
      }
    }, (function(err, response, body) {
      var json;
      if (!err && response.statusCode === 200) {
        this.log('response success');
        json = JSON.parse(body);
        json = JSON.parse(json['result']);
        this.log('Cool, Heat state is %s, %s', json.coolState, json.heatState);
        this.currentHeatingCoolingState = Characteristic.CurrentHeatingCoolingState.OFF;
        if (json.coolState) {
          this.currentHeatingCoolingState = Characteristic.CurrentHeatingCoolingState.COOL;
        }
        if (json.heatState) {
          this.currentHeatingCoolingState = Characteristic.CurrentHeatingCoolingState.HEAT;
        }
        return callback(null, this.currentHeatingCoolingState);
      } else {
        this.log('Error getting state: %s', err);
        return callback("Error getting state: " + err);
      }
    }).bind(this));
  },
  getTargetHeatingCoolingState: function(callback) {
    this.log('getTargetHeatingCoolingState from:', this.apiroute + '/info');
    return request.get({
      url: this.apiroute + '/info',
      auth: {
        bearer: this.access_token
      }
    }, (function(err, response, body) {
      var json;
      if (!err && response.statusCode === 200) {
        this.log('response success');
        json = JSON.parse(body);
        json = JSON.parse(json['result']);
        this.log('CoolHeat state is %s', json.mode);
        switch (json.mode) {
          case 'off':
            this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.OFF;
            break;
          case 'heat':
            this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.HEAT;
            break;
          case 'cool':
            this.targetHeatingCoolingState = Characteristic.TargetHeatingCoolingState.COOL;
            break;
          default:
            this.log('Not handled case:', json.mode);
            err = 'AUTO not supported';
            break;
        }
        return callback(err, this.targetHeatingCoolingState);
      } else {
        this.log('Error getting state: %s', err);
        return callback("Error getting state: " + err);
      }
    }).bind(this));
  },
  setTargetHeatingCoolingState: function(value, callback) {
    var arg;
    this.log('setTargetHeatingCoolingState from/to:', this.targetHeatingCoolingState, value);
    arg = void 0;
    switch (value) {
      case Characteristic.TargetHeatingCoolingState.OFF:
        arg = 'off';
        break;
      case Characteristic.TargetHeatingCoolingState.HEAT:
        arg = 'heat';
        break;
      case Characteristic.TargetHeatingCoolingState.COOL:
        arg = 'cool';
        break;
      case Characteristic.TargetHeatingCoolingState.AUTO:
        this.log('AUTO state unsupported');
        return callback('AUTO state unsupported');
      default:
        this.log('Not handled case:', value);
        return callback(value + " state unsupported");
        break;
    }
    this.targetHeatingCoolingState = value;
    return request.post({
      url: this.apiroute + '/setMode',
      form: {
        arg: arg
      },
      auth: {
        bearer: this.access_token
      }
    }, (function(err, response, body) {
      if (!err && response.statusCode === 200) {
        this.log(JSON.parse(body));
        this.log('response success');
        return callback(null);
      } else {
        this.log('Error setting state: %s', err);
        return callback("Error setting mode: " + err);
      }
    }).bind(this));
  },
  getCurrentTemperature: function(callback) {
    this.log('getCurrentTemperature from:', this.apiroute + '/info');
    return request.get({
      url: this.apiroute + '/info',
      auth: {
        bearer: this.access_token
      }
    }, (function(err, response, body) {
      var json;
      if (!err && response.statusCode === 200) {
        this.log('response success');
        json = JSON.parse(body);
        json = JSON.parse(json['result']);
        this.log('Currente Temperature is %s (%s)', json.temperature, json.mode);
        this.temperature = this.fToC(parseFloat(json.temperature));
        return callback(null, this.temperature);
      } else {
        this.log('Error getting current temp: %s', err);
        return callback("Error getting current temp: " + err);
      }
    }).bind(this));
  },
  getTargetTemperature: function(callback) {
    this.log('getCurrentTemperature from:', this.apiroute + '/info');
    return request.get({
      url: this.apiroute + '/info',
      auth: {
        bearer: this.access_token
      }
    }, (function(err, response, body) {
      var json;
      if (!err && response.statusCode === 200) {
        this.log('response success');
        json = JSON.parse(body);
        json = JSON.parse(json['result']);
        this.log('Target temperature is %s', json.targetTemperature);
        this.targetTemperature = this.fToC(parseFloat(json.targetTemperature));
        return callback(null, this.targetTemperature);
      } else {
        this.log('Error getting target temp: %s', err);
        return callback("Error getting target temp: " + err);
      }
    }).bind(this));
  },
  setTargetTemperature: function(value, callback) {
    this.log('setTargetTemperature from:', this.apiroute + '/targetTemperature/' + this.cToF(value));
    return request.post({
      url: this.apiroute + '/targetTemp',
      form: {
        arg: this.cToF(value)
      },
      auth: {
        bearer: this.access_token
      }
    }, (function(err, response, body) {
      if (!err && response.statusCode === 200) {
        this.log('response success');
        return callback(null);
      } else {
        this.log('Error getting state: %s', err);
        return callback("Error setting target temp: " + err);
      }
    }).bind(this));
  },
  getTemperatureDisplayUnits: function(callback) {
    var error;
    this.log('getTemperatureDisplayUnits:', this.temperatureDisplayUnits);
    error = null;
    return callback(error, this.temperatureDisplayUnits);
  },
  setTemperatureDisplayUnits: function(value, callback) {
    var error;
    this.log('setTemperatureDisplayUnits from %s to %s', this.temperatureDisplayUnits, value);
    error = null;
    error = "Setting display units is not supported";
    return callback(error);
  },
  getCurrentRelativeHumidity: function(callback) {
    this.log('getCurrentRelativeHumidity from:', this.apiroute + '/info');
    return callback("Relative humidity not supported");
  },
  getTargetRelativeHumidity: function(callback) {
    var error;
    this.log('Get humidity unsupported');
    error = "Get humidity unsupported";
    return callback(error);
  },
  setTargetRelativeHumidity: function(value, callback) {
    var error;
    this.log('Set humidity unsupported');
    error = "Set humidity unsupported";
    return callback(error);
  },
  getName: function(callback) {
    var error;
    this.log('getName :', this.name);
    error = null;
    return callback(error, this.name);
  },
  getServices: function() {
    var informationService, thermostatService, unit;
    informationService = new Service.AccessoryInformation;
    informationService.setCharacteristic(Characteristic.Manufacturer, 'HTTP Manufacturer').setCharacteristic(Characteristic.Model, 'HTTP Model').setCharacteristic(Characteristic.SerialNumber, 'HTTP Serial Number');
    thermostatService = new Service.Thermostat(this.name);
    thermostatService.getCharacteristic(Characteristic.CurrentHeatingCoolingState).on('get', this.getCurrentHeatingCoolingState.bind(this));
    thermostatService.getCharacteristic(Characteristic.TargetHeatingCoolingState).on('get', this.getTargetHeatingCoolingState.bind(this)).on('set', this.setTargetHeatingCoolingState.bind(this));
    thermostatService.getCharacteristic(Characteristic.CurrentTemperature).on('get', this.getCurrentTemperature.bind(this));
    thermostatService.getCharacteristic(Characteristic.TargetTemperature).on('get', this.getTargetTemperature.bind(this)).on('set', this.setTargetTemperature.bind(this));
    thermostatService.getCharacteristic(Characteristic.TemperatureDisplayUnits).on('get', this.getTemperatureDisplayUnits.bind(this)).on('set', this.setTemperatureDisplayUnits.bind(this));
    unit = Characteristic.TemperatureDisplayUnits.FAHRENHEIT;
    thermostatService.getCharacteristic(Characteristic.TemperatureDisplayUnits).value = unit;
    thermostatService.getCharacteristic(Characteristic.CurrentTemperature).unit = unit;
    thermostatService.getCharacteristic(Characteristic.TargetTemperature).unit = unit;

    /*
    thermostatService
    	.getCharacteristic(Characteristic.CoolingThresholdTemperature)
    	.on('get', this.getCoolingThresholdTemperature.bind(this));
     */
    thermostatService.getCharacteristic(Characteristic.Name).on('get', this.getName.bind(this));
    return [informationService, thermostatService];
  }
};
